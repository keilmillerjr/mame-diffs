diff -Nru src/osd/modules/render/drawd3d.cpp src/osd/modules/render/drawd3d.cpp
--- src/osd/modules/render/drawd3d.cpp	2019-01-27 17:37:43.000000000 +0100
+++ src/osd/modules/render/drawd3d.cpp	2019-01-27 19:33:39.000000000 +0100
@@ -26,7 +26,7 @@
 //  TYPE DEFINITIONS
 //============================================================
 
-typedef IDirect3D9* (WINAPI *d3d9_create_fn)(UINT);
+typedef IDirect3D9Ex* (WINAPI *d3d9_create_fn)(UINT, IDirect3D9Ex **);
 
 
 //============================================================
@@ -215,21 +215,21 @@
 
 	d3dintf->d3d9_dll = osd::dynamic_module::open({ "d3d9.dll" });
 
-	d3d9_create_fn d3d9_create_ptr = d3dintf->d3d9_dll->bind<d3d9_create_fn>("Direct3DCreate9");
+	d3d9_create_fn d3d9_create_ptr = d3dintf->d3d9_dll->bind<d3d9_create_fn>("Direct3DCreate9Ex");
 	if (d3d9_create_ptr == nullptr)
 	{
-		osd_printf_verbose("Direct3D: Unable to find Direct3D 9 runtime library\n");
+		osd_printf_verbose("Direct3D: Unable to find Direct3D 9Ex runtime library\n");
 		return true;
 	}
 
-	d3dintf->d3dobj = (*d3d9_create_ptr)(D3D_SDK_VERSION);
+	(*d3d9_create_ptr)(D3D_SDK_VERSION, (IDirect3D9Ex**) &d3dintf->d3dobj);
 	if (d3dintf->d3dobj == nullptr)
 	{
-		osd_printf_verbose("Direct3D: Unable to initialize Direct3D 9\n");
+		osd_printf_verbose("Direct3D: Unable to initialize Direct3D 9Ex\n");
 		return true;
 	}
 
-	osd_printf_verbose("Direct3D: Using Direct3D 9\n");
+	osd_printf_verbose("Direct3D: Using Direct3D 9Ex\n");
 
 	return false;
 }
@@ -862,8 +862,8 @@
 	m_presentation.Windowed = !win->fullscreen() || win->win_has_menu();
 	m_presentation.EnableAutoDepthStencil = FALSE;
 	m_presentation.AutoDepthStencilFormat = D3DFMT_D16;
-	m_presentation.Flags = 0;
-	m_presentation.FullScreen_RefreshRateInHz = m_refresh;
+	m_presentation.Flags = D3DPRESENTFLAG_UNPRUNEDMODE;
+	m_presentation.FullScreen_RefreshRateInHz = win->fullscreen()?m_refresh : 0;
 	m_presentation.PresentationInterval = (video_config.framedelay == 0 &&
 		((video_config.triplebuf && win->fullscreen())
 		|| video_config.waitvsync
@@ -957,9 +957,12 @@
 	// initialize the D3D presentation parameters
 	update_presentation_parameters();
 
+	auto win = assert_window();
+	D3DDISPLAYMODEEX *display_mode = win->fullscreen()? &m_display_mode : nullptr;
+
 	// create the D3D device
-	result = d3dintf->d3dobj->CreateDevice(
-		m_adapter, D3DDEVTYPE_HAL, device_hwnd, D3DCREATE_SOFTWARE_VERTEXPROCESSING | D3DCREATE_FPU_PRESERVE, &m_presentation, &m_device);
+	result = d3dintf->d3dobj->CreateDeviceEx(
+		m_adapter, D3DDEVTYPE_HAL, device_hwnd, D3DCREATE_SOFTWARE_VERTEXPROCESSING | D3DCREATE_FPU_PRESERVE, &m_presentation, display_mode, &m_device);
 	if (FAILED(result))
 	{
 		// if we got a "DEVICELOST" error, it may be transitory; count it and only fail if
@@ -980,6 +983,10 @@
 	m_create_error_count = 0;
 	osd_printf_verbose("Direct3D: Device created at %dx%d\n", m_width, m_height);
 
+	result = m_device->SetMaximumFrameLatency(1);
+	if (FAILED(result))
+		osd_printf_error("Unable to set Direct3DEx device maximum frame latency\n");
+
 	update_gamma_ramp();
 
 	return device_create_resources();
@@ -1295,14 +1302,17 @@
 int renderer_d3d9::restart()
 {
 	// free all existing resources
-	device_delete_resources();
+	if (m_shaders->enabled()) device_delete_resources();
 
 	// configure new video mode
 	pick_best_mode();
 	update_presentation_parameters();
 
+	auto win = assert_window();
+	D3DDISPLAYMODEEX *display_mode = win->fullscreen()? &m_display_mode : nullptr;
+
 	// reset the device
-	HRESULT result = m_device->Reset(&m_presentation);
+	HRESULT result = m_device->ResetEx(&m_presentation, display_mode);
 	if (FAILED(result))
 	{
 		osd_printf_error("Unable to reset, result %08lX\n", result);
@@ -1310,7 +1320,7 @@
 	}
 
 	// create the resources again
-	device_create_resources();
+	if (m_shaders->enabled()) device_create_resources();
 
 	return 0;
 }
@@ -1340,7 +1350,8 @@
 	m_vendor_id = id.VendorId;
 
 	// get the current display mode
-	result = d3dintf->d3dobj->GetAdapterDisplayMode(m_adapter, &m_origmode);
+	m_origmode.Size = sizeof(D3DDISPLAYMODEEX);
+	result = d3dintf->d3dobj->GetAdapterDisplayModeEx(m_adapter, &m_origmode, 0);
 	if (FAILED(result))
 	{
 		osd_printf_error("Error getting mode for adapter #%d\n", m_adapter);
@@ -1357,6 +1368,9 @@
 		// Disable SwitchRes
 		m_switchres_mode = 0;
 
+		// Use current desktop mode
+		m_display_mode = m_origmode;
+
 		// bounds are from the window client rect
 		GetClientRectExceptMenu(std::static_pointer_cast<win_window_info>(win)->platform_window(), &client, win->fullscreen());
 		m_width = client.right - client.left;
@@ -1364,7 +1378,7 @@
 
 		// pix format is from the current mode
 		m_pixformat = m_origmode.Format;
-		m_refresh = 0;
+		m_refresh = m_origmode.RefreshRate;
 
 		// make sure it's a pixel format we can get behind
 		if (m_pixformat != D3DFMT_X1R5G5B5 && m_pixformat != D3DFMT_R5G6B5 && m_pixformat != D3DFMT_X8R8G8B8)
@@ -1450,6 +1464,13 @@
 			m_height = m_switchres_mode->type & MODE_ROTATED? m_switchres_mode->width : m_switchres_mode->height;
 			m_refresh = (int)m_switchres_mode->refresh;
 			m_interlace = m_switchres_mode->interlace;
+
+			m_display_mode.Size = sizeof(D3DDISPLAYMODEEX);
+			m_display_mode.Width = m_width;
+			m_display_mode.Height = m_height;
+			m_display_mode.RefreshRate = m_refresh;
+			m_display_mode.Format = m_pixformat;
+			m_display_mode.ScanLineOrdering = m_interlace? D3DSCANLINEORDERING_INTERLACED : D3DSCANLINEORDERING_PROGRESSIVE;
 			return;
 		}
 	}
@@ -1478,9 +1499,16 @@
 	osd_printf_verbose("Direct3D: Selecting video mode...\n");
 	for (int modenum = 0; modenum < maxmodes; modenum++)
 	{
+		// allow all modes
+		D3DDISPLAYMODEFILTER filter;
+		memset (&filter, 0, sizeof(filter));
+		filter.Size = sizeof(D3DDISPLAYMODEFILTER);
+		filter.Format = D3DFMT_X8R8G8B8;
+
 		// check this mode
-		D3DDISPLAYMODE mode;
-		HRESULT result = d3dintf->d3dobj->EnumAdapterModes(m_adapter, D3DFMT_X8R8G8B8, modenum, &mode);
+		D3DDISPLAYMODEEX mode;
+		mode.Size = sizeof(mode);
+		HRESULT result = d3dintf->d3dobj->EnumAdapterModesEx(m_adapter, &filter, modenum, &mode);
 		if (FAILED(result))
 			break;
 
@@ -1518,6 +1546,7 @@
 			m_height = mode.Height;
 			m_pixformat = mode.Format;
 			m_refresh = mode.RefreshRate;
+			m_display_mode = mode;
 		}
 	}
 	osd_printf_verbose("Direct3D: Mode selected = %4dx%4d@%3dHz\n", m_width, m_height, m_refresh);
@@ -2140,7 +2169,9 @@
 	if (!PRIMFLAG_GET_SCREENTEX(flags))
 	{
 		assert(PRIMFLAG_TEXFORMAT(flags) != TEXFORMAT_YUY16);
-		result = m_renderer->get_device()->CreateTexture(m_rawdims.c.x, m_rawdims.c.y, 1, 0, D3DFMT_A8R8G8B8, D3DPOOL_MANAGED, &m_d3dtex, nullptr);
+		DWORD usage = m_texture_manager->is_dynamic_supported() ? D3DUSAGE_DYNAMIC : 0;
+		D3DPOOL pool = m_texture_manager->is_dynamic_supported() ? D3DPOOL_DEFAULT : D3DPOOL_MANAGED;
+		result = m_renderer->get_device()->CreateTexture(m_rawdims.c.x, m_rawdims.c.y, 1, usage, D3DFMT_A8R8G8B8, pool, &m_d3dtex, nullptr);
 		if (FAILED(result))
 			goto error;
 		m_d3dfinaltex = m_d3dtex;
diff -Nru src/osd/modules/render/drawd3d.h src/osd/modules/render/drawd3d.h
--- src/osd/modules/render/drawd3d.h	2019-01-27 17:37:40.000000000 +0100
+++ src/osd/modules/render/drawd3d.h	2019-01-27 19:31:39.000000000 +0100
@@ -39,7 +39,7 @@
 struct d3d_base
 {
 	// internal objects
-	IDirect3D9 *d3dobj;
+	IDirect3D9Ex *d3dobj;
 	bool        post_fx_available;
 
 	osd::dynamic_module::ptr d3d9_dll;
@@ -118,7 +118,7 @@
 	int                     get_height() const { return m_height; }
 	int                     get_refresh() const { return m_refresh; }
 
-	IDirect3DDevice9 *      get_device() const { return m_device; }
+	IDirect3DDevice9Ex *    get_device() const { return m_device; }
 	D3DPRESENT_PARAMETERS * get_presentation() { return &m_presentation; }
 
 	IDirect3DVertexBuffer9 *get_vertex_buffer() const { return m_vertexbuf; }
@@ -127,7 +127,7 @@
 
 	D3DFORMAT               get_screen_format() const { return m_screen_format; }
 	D3DFORMAT               get_pixel_format() const { return m_pixformat; }
-	D3DDISPLAYMODE          get_origmode() const { return m_origmode; }
+	D3DDISPLAYMODEEX        get_origmode() const { return m_origmode; }
 
 	uint32_t                  get_last_texture_flags() const { return m_last_texture_flags; }
 
@@ -150,10 +150,11 @@
 	int                     m_break_scanline;           // break scanline number, for vsync offset
 	int                     m_create_error_count;       // number of consecutive create errors
 
-	IDirect3DDevice9 *      m_device;                   // pointer to the Direct3DDevice object
+	IDirect3DDevice9Ex *    m_device;                   // pointer to the Direct3DDevice object
 	int                     m_gamma_supported;          // is full screen gamma supported?
 	D3DPRESENT_PARAMETERS   m_presentation;             // set of presentation parameters
-	D3DDISPLAYMODE          m_origmode;                 // original display mode for the adapter
+	D3DDISPLAYMODEEX        m_origmode;                 // original display mode for the adapter
+	D3DDISPLAYMODEEX        m_display_mode;             // full screen display mode
 	D3DFORMAT               m_pixformat;                // pixel format we are using
 	IDirect3DQuery9 *		m_query;
 
